package user_test

import (
	"bytes"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/gabrielgcmr/medapp/internal/user"
	"github.com/gabrielgcmr/medapp/internal/user/dto"
	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
)

func setupRouter() *gin.Engine {
	gin.SetMode(gin.TestMode)
	r := gin.Default()

	// Use um repo em memória ou um mock do DB real aqui
	repo := user.NewRepository( /* use um *gorm.DB em memória, se quiser */ )
	svc := user.NewService(repo)
	h := user.NewHandler(svc)

	r.POST("/api/register", h.Register)
	r.POST("/api/login", h.Login)
	return r
}

func TestHandler_RegisterAndLogin(t *testing.T) {
	router := setupRouter()

	// 1) Registrando usuário
	reg := dto.RegisterInput{FullName: "Ana", CPF: "111.222.333-44", Email: "ana@x.com", Password: "senha123", Profession: "acs"}
	body, _ := json.Marshal(reg)
	req := httptest.NewRequest(http.MethodPost, "/api/register", bytes.NewBuffer(body))
	req.Header.Set("Content-Type", "application/json")
	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusCreated, w.Code)
	var resp dto.UserResponse
	_ = json.Unmarshal(w.Body.Bytes(), &resp)
	assert.NotEmpty(t, resp.Token)

	// 2) Fazendo login
	login := dto.LoginInput{Email: "ana@x.com", Password: "senha123"}
	body, _ = json.Marshal(login)
	req = httptest.NewRequest(http.MethodPost, "/api/login", bytes.NewBuffer(body))
	req.Header.Set("Content-Type", "application/json")
	w = httptest.NewRecorder()
	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusOK, w.Code)
	var loginResp dto.UserResponse
	_ = json.Unmarshal(w.Body.Bytes(), &loginResp)
	assert.NotEmpty(t, loginResp.Token)
}
