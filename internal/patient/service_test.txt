package user_test

import (
	"errors"
	"testing"

	"github.com/gabrielgcmr/medapp/internal/user"
	"github.com/gabrielgcmr/medapp/internal/user/dto"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

// 1) Definimos um mock para o Repository
type RepoMock struct {
	mock.Mock
}

func (m *RepoMock) FindByEmail(email string) (*user.User, error) {
	args := m.Called(email)
	if args.Get(0) != nil {
		return args.Get(0).(*user.User), args.Error(1)
	}
	return nil, args.Error(1)
}
func (m *RepoMock) Create(u *user.User) error {
	return m.Called(u).Error(0)
}
func (m *RepoMock) FindByID(id int) (*user.User, error) {
	args := m.Called(id)
	if args.Get(0) != nil {
		return args.Get(0).(*user.User), args.Error(1)
	}
	return nil, args.Error(1)
}

// 2) Cenário de sucesso no Register
func TestService_Register_Success(t *testing.T) {
	repo := new(RepoMock)
	svc := user.NewService(repo)

	input := dto.RegisterInput{
		FullName:   "João",
		CPF:        "123.456.789-00",
		Email:      "joao@example.com",
		Password:   "minhasenha",
		Profession: "medico",
	}

	// Simula: não existe usuário com esse e-mail
	repo.On("FindByEmail", input.Email).Return(nil, errors.New("record not found"))
	// Simula: Create retorna sucesso
	repo.On("Create", mock.AnythingOfType("*user.User")).Return(nil)

	u, err := svc.Register(input)
	assert.NoError(t, err)
	assert.Equal(t, input.FullName, u.FullName)
	assert.Equal(t, input.CPF, u.CPF)
	assert.Equal(t, user.ProfessionMedico, u.Profession)

	repo.AssertExpectations(t)
}

// 3) Cenário de e-mail duplicado
func TestService_Register_DuplicateEmail(t *testing.T) {
	repo := new(RepoMock)
	svc := user.NewService(repo)

	input := dto.RegisterInput{Email: "dup@example.com"}
	// Simula que já existe um usuário com esse e-mail
	repo.On("FindByEmail", input.Email).Return(&user.User{}, nil)

	_, err := svc.Register(input)
	assert.EqualError(t, err, "este e-mail já está em uso")

	repo.AssertExpectations(t)
}

// 4) Cenário de sucesso no Login
func TestService_Login_Success(t *testing.T) {
	repo := new(RepoMock)
	svc := user.NewService(repo)

	// Prepara um usuário com hash de “senha123”
	hash, _ := user.HashPassword("senha123")
	stored := &user.User{ID: 42, Email: ptr("x@x.com"), PasswordHash: hash}

	repo.On("FindByEmail", "x@x.com").Return(stored, nil)

	u, err := svc.Login("x@x.com", "senha123")
	assert.NoError(t, err)
	assert.Equal(t, 42, u.ID)

	repo.AssertExpectations(t)
}

// 5) Cenário de login inválido
func TestService_Login_Invalid(t *testing.T) {
	repo := new(RepoMock)
	svc := user.NewService(repo)

	repo.On("FindByEmail", "fake@x.com").Return(nil, errors.New("record not found"))

	_, err := svc.Login("fake@x.com", "qualquer")
	assert.EqualError(t, err, "e-mail ou senha inválidos")

	repo.AssertExpectations(t)
}

// helper para ponteiro de string
func ptr(s string) *string { return &s }
